Index: user/src/com/google/gwt/user/client/dnd/DragListenerCollection.java
===================================================================
--- user/src/com/google/gwt/user/client/dnd/DragListenerCollection.java	(révision 0)
+++ user/src/com/google/gwt/user/client/dnd/DragListenerCollection.java	(révision 0)
@@ -0,0 +1,159 @@
+/*
+ * Copyright 2007 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.user.client.dnd;
+
+import com.google.gwt.user.client.ui.Widget;
+
+import java.util.Iterator;
+import java.util.Vector;
+
+/**
+ * The central collection of all drag objects and events.
+ * Affects the drag listeners and contains all fired methods
+ * which allow to add a drag listener to the widgets.
+ */
+public class DragListenerCollection extends Vector {
+  private MouseDragGestureRecognizer handle;
+  private Widget widget;
+
+  /**
+   * Creates a new
+   * {@link com.google.gwt.user.client.dnd.MouseDragGestureRecognizer},
+   * if it is null, and adds a MouseListener with the drag events.
+   * 
+   * @param listener the event to be listen by the widget
+   * @param w the widget to be listener
+   */
+  public void add(DragListener listener, Widget w) {
+    if (handle == null && listener != null) {
+      handle = new MouseDragGestureRecognizer(this, w);
+    }
+    if (listener != null) {
+      super.add(listener);
+    }
+    widget = w;
+  }
+
+  /**
+   * Fired the event onDrop to the drag Object,
+   * when it is released on a drop Target.
+   * 
+   * @param sender Widget sending the event (drag)
+   * @param target Widget targeted by the sending (drop)
+   */
+  public void fireDragOnDrop(Widget sender, Widget target) {
+    for (Iterator it = iterator(); it.hasNext();) {
+      DragListener listener = (DragListener) it.next();
+      listener.onDragDropEnd(sender, target);
+    }
+  }
+
+  /**
+   * Fired when a widget finish his move.
+   * 
+   * @param sender the widget sending the event (drag)
+   * @param x the x coordinate of the mouse
+   * @param y the y coordinate of the mouse
+   */
+  public void fireOnDragEnd(Widget sender, int x, int y) {
+    for (Iterator it = iterator(); it.hasNext();) {
+      DragListener listener = (DragListener) it.next();
+      listener.onDragEnd(sender, x, y);
+    }
+  }
+
+  /**
+   * Fired when a widget enter a drop target.
+   * 
+   * @param sender Widget sending the event (drag)
+   * @param target Widget targeted by the sending (drop)
+   */
+  public void fireOnDragEnter(Widget sender, Widget target) {
+    for (Iterator it = iterator(); it.hasNext();) {
+      DragListener listener = (DragListener) it.next();
+      listener.onDragEnter(sender, target);
+    }
+  }
+
+  /**
+   * Fired when a widget quit the drop target area.
+   * 
+   * @param sender Widget sending the event (drag)
+   * @param target Widget targeted by the sending (drop)
+   */
+  public void fireOnDragExit(Widget sender, Widget target) {
+    for (Iterator it = iterator(); it.hasNext();) {
+      DragListener listener = (DragListener) it.next();
+      listener.onDragExit(sender, target);
+    }
+  }
+
+  /**
+   * Fired when a widget move, if it is over or not a drop target.
+   * 
+   * @param sender the widget sending the event (drag)
+   * @param x the x coordinate of the mouse
+   * @param y the y coordinate of the mouse
+   */
+  public void fireOnDragMove(Widget sender, int x, int y) {
+    for (Iterator it = iterator(); it.hasNext();) {
+      DragListener listener = (DragListener) it.next();
+      listener.onDragMouseMoved(sender, x, y);
+    }
+  }
+
+  /**
+   * Fired when a widget is over a drop target.
+   * 
+   * @param sender Widget sending the event (drag)
+   * @param target Widget targeted by the sending (drop)
+   */
+  public void fireOnDragOver(Widget sender, Widget target) {
+    for (Iterator it = iterator(); it.hasNext();) {
+      DragListener listener = (DragListener) it.next();
+      listener.onDragOver(sender, target);
+    }
+  }
+
+  /**
+   * Fired an event when the drag of a Widget is beginning.
+   * 
+   * @param sender the widget sending the event (drag)
+   * @param x the x coordinate of the mouse
+   * @param y the y coordinate of the mouse
+   */
+  public void fireOnDragStart(Widget sender, int x, int y) {
+    for (Iterator it = iterator(); it.hasNext();) {
+      DragListener listener = (DragListener) it.next();
+      listener.onDragStart(sender, x, y);
+    }
+  }
+
+  /**
+   * Removes a MouseListener from
+   * {@link com.google.gwt.user.client.dnd.MouseDragGestureRecognizer}
+   * and remove a Drag listener, from this collection.
+   * 
+   * @param listener the event to remove
+   */
+  public void remove(DragListener listener) {
+    super.remove(listener);
+    if (this.size() == 0 && handle != null) {
+      handle.removeMouseListener(widget);
+      handle = null;
+    }
+  }
+}
Index: user/src/com/google/gwt/user/client/dnd/DragListener.java
===================================================================
--- user/src/com/google/gwt/user/client/dnd/DragListener.java	(révision 0)
+++ user/src/com/google/gwt/user/client/dnd/DragListener.java	(révision 0)
@@ -0,0 +1,85 @@
+/*
+ * Copyright 2007 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.user.client.dnd;
+
+import com.google.gwt.user.client.ui.Widget;
+
+import java.util.EventListener;
+
+/**
+ * Event listener interface for drag events.
+ */
+public interface DragListener extends EventListener {
+
+  /**
+   * Fired when a dragging widget is released on dropping target.
+   * 
+   * @param sender Widget sending the event (drag)
+   * @param target Widget targeted by the sending (drop)
+   */
+  void onDragDropEnd(Widget sender, Widget target);
+
+  /**
+   * Fired when a dragging widget finish his move.
+   * 
+   * @param sender the widget sending the event (drag)
+   * @param x the x coordinate of the mouse
+   * @param y the y coordinate of the mouse
+   */
+  void onDragEnd(Widget sender, int x, int y);
+
+  /**
+   * Fired when a dragging widget enter a dropping target.
+   * 
+   * @param sender Widget sending the event (drag)
+   * @param target Widget targeted by the sending (drop)
+   */
+  void onDragEnter(Widget sender, Widget target);
+
+  /**
+   * Fired when a dragging widget exit a dropping target.
+   * 
+   * @param sender Widget sending the event (drag)
+   * @param target Widget targeted by the sending (drop)
+   */
+  void onDragExit(Widget sender, Widget target);
+
+  /**
+   * Fired when a dragging widget move.
+   * 
+   * @param sender the widget sending the event (drag)
+   * @param x the x coordinate of the mouse
+   * @param y the y coordinate of the mouse
+   */
+  void onDragMouseMoved(Widget sender, int x, int y);
+
+  /**
+   * Fired when a dragging widget is over a dropping target.
+   * 
+   * @param sender Widget sending the event (drag)
+   * @param target Widget targeted by the sending (drop)
+   */
+  void onDragOver(Widget sender, Widget target);
+
+  /**
+   * Fired when a dragging widget is clicked.
+   * 
+   * @param sender the widget sending the event (drag)
+   * @param x the x coordinate of the mouse
+   * @param y the y coordinate of the mouse
+   */
+  void onDragStart(Widget sender, int x, int y);
+}
Index: user/src/com/google/gwt/user/client/dnd/DragListenerAdapter.java
===================================================================
--- user/src/com/google/gwt/user/client/dnd/DragListenerAdapter.java	(révision 0)
+++ user/src/com/google/gwt/user/client/dnd/DragListenerAdapter.java	(révision 0)
@@ -0,0 +1,46 @@
+/*
+ * Copyright 2007 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.user.client.dnd;
+
+import com.google.gwt.user.client.ui.Widget;
+
+/**
+ * An adapter to simplify drag event listeners that do not need all events
+ * defined on the DragListener interface.
+ */
+public class DragListenerAdapter implements DragListener {
+
+  public void onDragDropEnd(Widget sender, Widget target) {
+  }
+
+  public void onDragEnter(Widget sender, Widget target) {
+  }
+
+  public void onDragExit(Widget sender, Widget target) {
+  }
+
+  public void onDragMouseMoved(Widget sender, int x, int y) {
+  }
+
+  public void onDragOver(Widget sender, Widget target) {
+  }
+
+  public void onDragEnd(Widget sender, int x, int y) {
+  }
+
+  public void onDragStart(Widget sender, int x, int y) {
+  }
+}
Index: user/src/com/google/gwt/user/client/dnd/DropListenerCollection.java
===================================================================
--- user/src/com/google/gwt/user/client/dnd/DropListenerCollection.java	(révision 0)
+++ user/src/com/google/gwt/user/client/dnd/DropListenerCollection.java	(révision 0)
@@ -0,0 +1,125 @@
+/*
+ * Copyright 2007 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.user.client.dnd;
+
+import com.google.gwt.user.client.ui.Widget;
+
+import java.util.Iterator;
+import java.util.Vector;
+
+/**
+ * The central collection of all drop objects and events.
+ * Affects the drop listeners and contains all fired methods
+ * which allow to add a drop listener to the widgets.
+ */
+public class DropListenerCollection extends Vector {
+  private Widget widget;
+
+  /**
+   * Adds a DropListenerCollection to unique Vector List from
+   * {@link com.google.gwt.user.client.dnd.MouseDragGestureRecognizer}.
+   * This list will be analyzed so that a
+   * dragging widget could find a dropping target.
+   * 
+   * @param listener the event to be listened
+   * @param w the widget associated to a drop target
+   */
+  public void add(DropListener listener, Widget w) {
+    if (listener != null) {
+      this.widget = w;
+      if (this.size() == 0) {
+        MouseDragGestureRecognizer.addDropMap(this);
+      }
+      super.add(listener);
+    }
+  }
+
+  /**
+   * Fired when a widget is release on the target,
+   * the target is listening the event.
+   * 
+   * @param sender Widget sending the event (drop)
+   * @param source Widget targeted by the sending (drag)
+   */
+  public void fireDropOnDrop(Widget sender, Widget source) {
+    for (Iterator it = iterator(); it.hasNext();) {
+      DropListener listener = (DropListener) it.next();
+      listener.onDrop(sender, source);
+    }
+  }
+
+  /**
+   * Fired when a widget enter a target , the drop target is listening.
+   * 
+   * @param sender Widget sending the event (drop)
+   * @param source Widget targeted by the sending (drag)
+   */
+  public void fireOnDropEnter(Widget sender, Widget source) {
+    for (Iterator it = iterator(); it.hasNext();) {
+      DropListener listener = (DropListener) it.next();
+      listener.onDropEnter(sender, source);
+    }
+  }
+
+  /**
+   * Fired when a widget exit a target , the drop target is listening.
+   * 
+   * @param sender Widget sending the event (drop)
+   * @param source Widget targeted by the sending (drag)
+   */
+  public void fireOnDropExit(Widget sender, Widget source) {
+    for (Iterator it = iterator(); it.hasNext();) {
+      DropListener listener = (DropListener) it.next();
+      listener.onDropExit(sender, source);
+    }
+  }
+
+  /**
+   * Fired when a widget is over a target , the drop target is listening.
+   * 
+   * @param sender Widget sending the event (drop)
+   * @param source Widget targeted by the sending (drag)
+   */
+  public void fireOnDropOver(Widget sender, Widget source) {
+    for (Iterator it = iterator(); it.hasNext();) {
+      DropListener listener = (DropListener) it.next();
+      listener.onDropOver(sender, source);
+    }
+  }
+
+  /**
+   * Gets the widget associated to a drop listener.
+   * 
+   * @return a drop target widget
+   */
+  public Widget getWidget() {
+    return this.widget;
+  }
+
+  /**
+   * Removes this from Drop List Map (contains in
+   * {@link com.google.gwt.user.client.dnd.MouseDragGestureRecognizer} )
+   * and removes a Drop listener, from this collection.
+   * 
+   * @param listener the event to remove
+   */
+  public void remove(DropListener listener) {
+    super.remove(listener);
+    if (this.size() == 0) {
+      MouseDragGestureRecognizer.getDropMap().remove(this);
+    }
+  }
+}
Index: user/src/com/google/gwt/user/client/dnd/SourcesDragEvents.java
===================================================================
--- user/src/com/google/gwt/user/client/dnd/SourcesDragEvents.java	(révision 0)
+++ user/src/com/google/gwt/user/client/dnd/SourcesDragEvents.java	(révision 0)
@@ -0,0 +1,37 @@
+/*
+ * Copyright 2007 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.user.client.dnd;
+
+/**
+ * A widget that implements this interface sources the events defined by the
+ * {@link com.google.gwt.user.client.dnd.DragListener} interface.
+ */
+public interface SourcesDragEvents {
+
+  /**
+   * Adds a listener interface to receive drag events.
+   * 
+   * @param listener the listener interface to add
+   */
+  void addDragListener(DragListener listener);
+
+  /**
+   * Removes a previously added drag listener interface.
+   * 
+   * @param listener the listener interface to remove
+   */
+  void removeDragListener(DragListener listener);
+}
Index: user/src/com/google/gwt/user/client/dnd/DropListener.java
===================================================================
--- user/src/com/google/gwt/user/client/dnd/DropListener.java	(révision 0)
+++ user/src/com/google/gwt/user/client/dnd/DropListener.java	(révision 0)
@@ -0,0 +1,58 @@
+/*
+ * Copyright 2007 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.user.client.dnd;
+
+import com.google.gwt.user.client.ui.Widget;
+
+import java.util.EventListener;
+
+/**
+ * Event listener interface for drop events.
+ */
+public interface DropListener extends EventListener {
+
+  /**
+   * Fired when a dragging widget is released on a dropping target.
+   * 
+   * @param sender Widget sending the event (drop)
+   * @param source Widget targeted by the sending (drag)
+   */
+  void onDrop(Widget sender, Widget source);
+
+  /**
+   * Fired when a dragging widget enter on a dropping target.
+   * 
+   * @param sender Widget sending the event (drop)
+   * @param source Widget targeted by the sending (drag)
+   */
+  void onDropEnter(Widget sender, Widget source);
+
+  /**
+   * Fired when a dragging widget exit a dropping target.
+   * 
+   * @param sender Widget sending the event (drop)
+   * @param source Widget targeted by the sending (drag)
+   */
+  void onDropExit(Widget sender, Widget source);
+
+  /**
+   * Fired when a dragging widget is over a dropping target.
+   * 
+   * @param sender Widget sending the event (drop)
+   * @param source Widget targeted by the sending (drag)
+   */
+  void onDropOver(Widget sender, Widget source);
+}
Index: user/src/com/google/gwt/user/client/dnd/DropListenerAdapter.java
===================================================================
--- user/src/com/google/gwt/user/client/dnd/DropListenerAdapter.java	(révision 0)
+++ user/src/com/google/gwt/user/client/dnd/DropListenerAdapter.java	(révision 0)
@@ -0,0 +1,37 @@
+/*
+ * Copyright 2007 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.user.client.dnd;
+
+import com.google.gwt.user.client.ui.Widget;
+
+/**
+ * An adapter to simplify drop event listeners that do not need all events
+ * defined on the DropListener interface.
+ */
+public class DropListenerAdapter implements DropListener {
+
+  public void onDrop(Widget sender, Widget source) {
+  }
+
+  public void onDropEnter(Widget sender, Widget source) {
+  }
+
+  public void onDropExit(Widget sender, Widget source) {
+  }
+
+  public void onDropOver(Widget sender, Widget source) {
+  }
+}
Index: user/src/com/google/gwt/user/client/dnd/MouseDragGestureRecognizer.java
===================================================================
--- user/src/com/google/gwt/user/client/dnd/MouseDragGestureRecognizer.java	(révision 0)
+++ user/src/com/google/gwt/user/client/dnd/MouseDragGestureRecognizer.java	(révision 0)
@@ -0,0 +1,847 @@
+/*
+ * Copyright 2007 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.user.client.dnd;
+
+import com.google.gwt.core.client.JavaScriptException;
+import com.google.gwt.user.client.DOM;
+import com.google.gwt.user.client.Element;
+import com.google.gwt.user.client.ui.MouseListener;
+import com.google.gwt.user.client.ui.SourcesMouseEvents;
+import com.google.gwt.user.client.ui.Widget;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Vector;
+
+/**
+ * Class where all the different listeners are fired by the MouseListener.<br>
+ * It's also the gesture of all Drag and Drop behavior.<br>
+ * You can manage every functions from an external class.<br>
+ * For example, on a mouse move, we'll move our Widget
+ * and fire the onDragMouseMove listener.<br>
+ * If you want to avoid a move, just apply this :<br><br>
+ * <code>
+ * myMouseGesture = MouseDragGestureRecognizer.getMouseGesture(widget);<br>
+ * myMouseGesture.setDragMove(false);
+ * </code>
+ * <br><br>
+ * Then on a onDragMouseMove listener, puts the function you need :<br><br>
+ * <code>
+ * onDragMouseMove (Widget sender, int x, int y) {<br>
+ *   myAbsolutePanel.setWidgetPosition( x , y );<br>
+ * } <br>
+ * </code>
+ */
+public class MouseDragGestureRecognizer implements MouseListener {
+  private static Vector dropListenerMap;
+  private static HashMap mouseGesture;
+
+  /**
+   * Adds a Drop listener to a Vector list. This map will help to find
+   * a drop target and gets his widget.
+   * 
+   * @param listener the listener to detect
+   */
+  public static void addDropMap(DropListenerCollection listener) {
+    if (dropListenerMap == null) {
+      dropListenerMap = new Vector();
+    }
+    dropListenerMap.add(listener);
+  }
+
+  /**
+   * Compares two widgets with the directs coordinates of the first one.
+   * (Improve performance and avoid to go look for DOM on a loop, for example)
+   * 
+   * @param left the left coordinate of the first widget
+   * @param right the right coordinate of the first widget
+   * @param top the top coordinate of the first widget
+   * @param bottom the bottom coordinate of the first widget
+   * @param w the widget we want to compare with the coordinates
+   * 
+   * @return true if the two widgets are over, else false
+   */
+  public static boolean detectDrop(int left, int right,
+      int top, int bottom, Widget w) {
+    Element w2 = w.getElement();
+    int targetLeft = DOM.getElementPropertyInt(w2, "startLeft");
+    int targetTop = DOM.getElementPropertyInt(w2, "startTop");
+      return (bottom > targetTop
+          && top < targetTop + DOM.getElementPropertyInt(w2, "startHeight")
+          && right > targetLeft
+          && left <  targetLeft + DOM.getElementPropertyInt(w2, "startWidth"));
+  }
+
+  /**
+   * Gets the border left width of an element.
+   * 
+   * @param elem the Widget to get his border
+   * @return the border left size
+   */
+  public static native int getBorderLeft(Element elem) /*-{
+  if ($doc.defaultView != null) {
+    var sElem = $doc.defaultView.getComputedStyle(elem, null);
+    if (sElem != null) {
+      var bLeft = parseInt(sElem.getPropertyValue("border-left-width"));
+      return bLeft == -1 ? 0 : bLeft;
+    }
+  }
+  return 0;
+  }-*/;
+
+  /**
+   * Gets the border top width of an element.
+   * 
+   * @param elem the Widget to get his border
+   * @return the border top size
+   */
+  public static native int getBorderTop(Element elem) /*-{
+  if ($doc.defaultView != null) {
+    var sElem = $doc.defaultView.getComputedStyle(elem, null);
+    if (sElem != null) {
+      var bTop = parseInt(sElem.getPropertyValue("border-top-width"));
+      return bTop == -1 ? 0 : bTop;
+    }
+  }
+  return 0;
+  }-*/;
+
+  /**
+   * Gets the current Drop Listener Lists.
+   * 
+   * @return a vector list containing all drop Collection Listener
+   */
+  public static Vector getDropMap() {
+    return dropListenerMap;
+  }
+
+  /**
+   * Gets the {@link com.google.gwt.user.client.dnd.MouseDragGestureRecognizer}
+   * corresponding to a widget.
+   * 
+   * @return a mouseGesture, necessary so that you can
+   * manage all drag and drop events, with an external class
+   */
+  public static MouseDragGestureRecognizer getGestureMouse(Widget dragHandle) {
+    if (mouseGesture != null && mouseGesture.containsKey(dragHandle)) {
+      return (MouseDragGestureRecognizer) mouseGesture.get(dragHandle);
+    } else {
+      return null;
+    }
+  }
+
+  /**
+   * Gets the direct height size of a widget.
+   * 
+   * @param elem : the element to be listen
+   * @return the height of the element
+   */
+  public static native int getHeight(Element elem) /*-{
+    return parseInt(elem.offsetHeight);
+  }-*/;
+
+  /**
+   * Gets the direct left coordinate of a widget.
+   * 
+   * @param elem : the element to be listen
+   * @return the left of the element
+   */
+  public static native int getLeft(Element elem) /*-{
+    return parseInt(elem.offsetLeft);
+  }-*/;
+
+  /**
+   * Gets the direct top coordinate of a widget.
+   * 
+   * @param elem : the element to be listen
+   * @return the top of the element
+   */
+  public static native int getTop(Element elem) /*-{
+    return parseInt(elem.offsetTop);
+  }-*/;
+
+  /**
+   * Gets the direct width size of a widget.
+   * 
+   * @param elem : the element to be listen
+   * @return the width of the element
+   */
+  public static native int getWidth(Element elem) /*-{
+    return parseInt(elem.offsetWidth);
+  }-*/;
+
+  /**
+   * Sets the list of Drop Listener.
+   * 
+   * @param v the new Vector List of drops
+   */
+  public static void setDropMap(Vector v) {
+    dropListenerMap = v;
+  }
+
+  /**
+   * Sets the list of MouseDragGestureRecognizer objects.
+   * 
+   * @param m the new HashMap
+   */
+  public static void setMouse(HashMap m) {
+    mouseGesture = m;
+  }
+
+  /**
+   * The absolutePanel method, adapted for drag and drop.
+   * You can move a widget without having to call an inherit absolute panel.
+   * If you want to disallow this method,
+   * and drag a widget everywhere in a panel,
+   * simply put dragMove false.
+   * 
+   * @param w the widget to position
+   * @param left the left coordinate
+   * @param top the top coordinate
+   */
+  public static void setWidgetPosition(Widget w, int left, int top) {
+    Element h = w.getElement();
+    DOM.setStyleAttribute(h, "position", "absolute");
+    DOM.setStyleAttribute(h, "left", left + "px");
+    DOM.setStyleAttribute(h, "top", top + "px");
+  }
+
+  private boolean dragOver = false, isClic = false, dragMove = true,
+      init = true, dragPadding = true, update = true;
+  private int xOffset = 0, yOffset = 0, left = 0, right = 0, top = 0,
+      bottom = 0, borderLeft = 0, borderTop = 0, padding = 0;
+  private Widget drag = null, drop = null, dragHandle = null;
+  private DragListenerCollection dragListener;
+  private DropListenerCollection dropListener;
+
+  /**
+   * Constructor for
+   * {@link com.google.gwt.user.client.dnd.MouseDragGestureRecognizer}.
+   * 
+   *  Initialize the different parameters. <br>
+   *  Gets the drag and drop collection of Events,
+   *  Native Javascript and short cuts
+   * 
+   *  @param listener the Drag Listener to add
+   *  @param dragHandle the Widget which will receive a MouseListener
+   */
+  public MouseDragGestureRecognizer(DragListenerCollection listener,
+      Widget dragHandle) {
+    this.dragListener = listener;
+    if (dragHandle instanceof SourcesMouseEvents) {
+      ((SourcesMouseEvents) dragHandle).addMouseListener(this);
+      if (mouseGesture == null) {
+        mouseGesture = new HashMap();
+      }
+      mouseGesture.put(dragHandle, this);
+    }
+    if (dropListenerMap == null) {
+      dropListenerMap = new Vector();
+    }
+  }
+
+  /**
+   * Gets the border Left of a widget parent.
+   * 
+   * @return the border Left parent
+   */
+  public int getBorderLeft() {
+    return this.borderLeft;
+  }
+
+  /**
+   * Gets the border Top of a widget parent.
+   * 
+   * @return the border Top parent
+   */
+  public int getBorderTop() {
+    return this.borderTop;
+  }
+
+  /**
+   * Gets the drag widget. The ones which is moving.
+   * 
+   * @return the current drag widget
+   */
+  public Widget getDrag() {
+    return this.drag;
+  }
+
+  /**
+   * Gets the {@link com.google.gwt.user.client.dnd.DragListenerCollection}
+   * which is listening and firing all events.
+   * 
+   * @return the current DragListenerCollection
+   */
+  public DragListenerCollection getDragCollection() {
+    return this.dragListener;
+  }
+
+  /**
+   * Gets the handle source widget. The ones which has been clicked
+   * or moving if no drag widget has been declared.
+   * 
+   * @return the current handle widget
+   */
+  public Widget getDragHandle() {
+    return this.dragHandle;
+  }
+
+  /**
+   * Gets the current boolean which allow to move a widget.
+   * 
+   * @return true if the move is automatic, else, false
+   */
+  public boolean getDragMove() {
+    return this.dragMove;
+  }
+
+  /**
+   * Gets the currents Drag over boolean.
+   * Checks if a widget is over an other one.
+   * 
+   * @return true if a drop target is detected on a drag
+   */
+  public boolean getDragOver() {
+    return this.dragOver;
+  }
+
+  /**
+   * Gets a drag padding boolean.
+   * Checks if the padding of detection is automatic.
+   * 
+   * @return true if the padding is automatic,
+   * else, the user have to set his own left, right,
+   * top and bottom coordinate of detection
+   */
+  public boolean getDragPadding() {
+    return this.dragPadding;
+  }
+
+  /**
+   * Gets the drop Target Widget which has been detected.
+   * 
+   * @return the current drop widget if it is detected, else, null
+   */
+  public Widget getDrop() { 
+    return this.drop;
+  }
+
+  /**
+   * Gets the {@link com.google.gwt.user.client.dnd.DropListenerCollection}
+   * which has been detected by an other widget.
+   * 
+   * @return the DragListenerCollection detected by a widget
+   */
+  public DropListenerCollection getDropCollection() {
+    return this.dropListener;
+  }
+
+  /**
+   * Gets the currents initiate boolean.
+   * Checks if a widget if init parameters are instantiate.
+   * 
+   * @return true if a widget parameters are initiated, else, false
+   */
+  public boolean getInit() {
+    return this.init;
+  }
+
+  /**
+   * Gets the currents click boolean. Checks if a widget has been clicked.
+   * 
+   * @return true if a widget is clicked, else, on released false
+   */
+  public boolean getIsClic() {
+    return this.isClic;
+  }
+
+  /**
+   * Gets the current
+   * {@link com.google.gwt.user.client.dnd.MouseDragGestureRecognizer}.
+   * 
+   * @return a MouseDragGestureRecognizer associated with a widget
+   */
+  public HashMap getMouse() {
+    return mouseGesture;
+  }
+
+  /**
+   * Gets The current {@link com.google.gwt.user.client.ui.MouseListener}.
+   * 
+   * @return a Mouse listener
+   */
+  public MouseListener getMouseListener() {
+    return this;
+  }
+
+  /**
+   * Gets the current detecting drop target padding. By default = 0.
+   * 
+   * @return the coordinate of the detection padding of a drag widget
+   */
+  public int getPadding() {
+    return this.padding;
+  }
+
+  /**
+   * Gets the current bottom detecting drop target padding.
+   * 
+   * @return the bottom coordinate of the detection padding of a drag widget
+   */
+  public int getPaddingBottom() {
+    return this.bottom;
+  }
+
+  /**
+   * Gets the current left detecting drop target padding.
+   * 
+   * @return the left coordinate of the detection padding of a drag widget
+   */
+  public int getPaddingLeft() {
+    return this.left;
+  }
+
+  /**
+   * Gets the current right detecting drop target padding.
+   * 
+   * @return the right coordinate of the detection padding of a drag widget
+   */
+  public int getPaddingRight() {
+    return this.right;
+  }
+
+  /**
+   * Gets the current top detecting drop target padding.
+   * 
+   * @return the top coordinate of the detection padding of a drag widget
+   */
+  public int getPaddingTop() {
+    return this.top;
+  }
+
+  /**
+   * Gets the current boolean which allows to update all drop positions
+   * 
+   * @return true if position are updated
+   */
+  public boolean getUpdatePosition() {
+    return this.update;
+  }
+
+  /**
+   * Gets the currents click x coordinate of a widget.
+   * 
+   * @return the x coordinate of the mouse, when a widget is clicked
+   */
+  public int getXoff() {
+    return this.xOffset;
+  }
+
+  /**
+   * Gets the currents click y coordinate of a widget.
+   * 
+   * @return the y coordinate of the mouse, when a widget is clicked
+   */
+  public int getYoff() {
+    return this.yOffset;
+  }
+
+  /**
+   * Removes the current mouse listener.
+   * It is used when the Drag Collection is empty.
+   * 
+   * @param w the widget to remove his MouseListener
+   */
+  public void removeMouseListener(Widget w) {
+    ((SourcesMouseEvents) w).removeMouseListener(this);
+  }
+
+  /**
+   * Sets the border Left of a widget parent.
+   * 
+   * @param i the new Border Left
+   */
+  public void setBorderLeft(int i) {
+    this.borderLeft = i;
+  }
+
+  /**
+   * Sets the border Top of a widget parent.
+   * 
+   * @param i the new Border Top
+   */
+  public void setBorderTop(int i) {
+    this.borderTop = i;
+  }
+
+  /**
+   * Sets the widget to move, instead of the dragHandle.
+   * 
+   * @param w the widget to move
+   */
+  public void setDrag(Widget w) {
+    this.drag = w;
+  }
+
+  /**
+   * Sets a new Drag Listener Collection.
+   * 
+   * @param d the listener to replace
+   */
+  public void setDragCollection(DragListenerCollection d) {
+    this.dragListener = d;
+  }
+
+  /**
+   * Sets the current drag to handle.
+   * 
+   * @param w the widget to handle
+   */
+  public void setDragHandle(Widget w) {
+    this.dragHandle = w;
+  }
+
+  /**
+   * Sets the possibility to allow move or not of a widget.
+   * 
+   * @param bool true if you wants to move the widget
+   */
+  public void setDragMove(boolean bool) {
+    this.dragMove = bool;
+  }
+
+  /**
+   * Sets the current boolean detection between two widgets.
+   * 
+   * @param bool true if a drop Target is detected by a drag source
+   */
+  public void setDragOver(boolean bool) {
+    this.dragOver = bool;
+  }
+
+  /**
+   * Sets the possibility to add a padding when a widget detect an other.
+   * See the method detectDrop
+   * 
+   * @param bool true if you wants to add a padding the widget
+   */
+  public void setDragPadding(boolean bool) {
+    this.dragPadding = bool;
+  }
+
+  /**
+   * Sets the widget detected.
+   * 
+   * @param w the widget to be detected
+   */
+  public void setDrop(Widget w) {
+    this.drop = w;
+  }
+
+  /**
+   * Sets a new Drop Listener Collection.
+   * 
+   * @param d the listener to replace
+   */
+  public void setDropCollection(DropListenerCollection d) {
+    this.dropListener = d;
+  }
+
+  /**
+   * Sets the currents init boolean.
+   * 
+   * @param bool true if a drag source initiates his parameters
+   */
+  public void setInit(boolean bool) {
+    this.init = bool;
+  }
+
+  /**
+   * Sets the currents isClic boolean.
+   * 
+   * @param bool true if a mouse clic on a drag source
+   */
+  public void setIsClic(boolean bool) {
+    this.isClic = bool;
+  }
+
+  /**
+   * Sets a new Padding coordinate to detect a drop target.
+   * 
+   * @param i Sets an integer on a mouseDragMove
+   */
+  public void setPadding(int i) {
+    this.padding = i;
+  }
+
+  /**
+   * Sets a new Bottom Padding coordinate to detect a drop target.
+   * 
+   * @param i Sets an integer bottom on a mouseDragMove
+   */
+  public void setPaddingBottom(int i) {
+    this.bottom = i;
+  }
+
+  /**
+   * Sets a new Left Padding coordinate to detect a drop target.
+   * 
+   * @param i Sets an integer left on a mouseDragMove
+   */
+  public void setPaddingLeft(int i) {
+    this.left = i;
+  }
+
+  /**
+   * Sets a new Right Padding coordinate to detect a drop target.
+   * 
+   * @param i Sets an integer right on a mouseDragMove
+   */
+  public void setPaddingRight(int i) {
+    this.right = i;
+  }
+
+  /**
+   * Sets a new Top Padding coordinate to detect a drop target.
+   * 
+   * @param i Sets an integer top on a mouseDragMove
+   */
+  public void setPaddingTop(int i) {
+    this.top = i;
+  }
+
+  /**
+   * Sets the possibility to update all drop target position and dimensions.
+   * 
+   * @param updatePosition Sets a boolean that allows
+   * to update all drop target position and dimensions
+   */
+  public void setUpdatePosition(boolean updatePosition) {
+    this.update = updatePosition;
+  }
+
+  /**
+   * Sets a new beginning X coordinate to the move.
+   * 
+   * @param i the new X coordinate of the mouse
+   */
+  public void setXoff(int i) {
+    this.xOffset = i;
+  }
+
+  /**
+   * Sets a new beginning Y coordinate to the move.
+   * 
+   * @param i the new Y coordinate of the mouse.
+   */
+  public void setYoff(int i) {
+    this.yOffset = i;
+  }
+
+  /*
+   * dragHandle : Detect the dragHandle,
+   * the widget which is clicked on a mousedown,
+   * drag : Gets the widget associated to the handle, and which will move,
+   * dragListener.fireOnDragStart : Fire the start drag event,
+   * isClic : Allow a move.
+   */
+  /** Fired when the user depresses the mouse button over a widget.<br>
+   * This will fire all the events around this widget.
+   * 
+   * @see com.google.gwt.user.client.ui.MouseListener#onMouseDown(
+   * com.google.gwt.user.client.ui.Widget, int, int)
+   * 
+   * @param sender the widget sending the event
+   * @param x the x coordinate of the mouse
+   * @param y the y coordinate of the mouse
+   */
+  public void onMouseDown(Widget sender, int x, int y) {
+    try {
+      isClic = true;
+      dragHandle = sender;
+      if (dragHandle != null) {
+        DOM.setCapture(dragHandle.getElement());
+        if (drag == null) {
+          drag = dragHandle;
+        }
+        if (init) {
+          xOffset = x;
+          yOffset = y;
+          Element dragParent = drag.getParent().getElement();
+          borderLeft = this.getBorderLeft(dragParent);
+          borderTop = this.getBorderTop(dragParent);
+        }
+        dragListener.fireOnDragStart(dragHandle, x, y);
+      }
+    } catch (JavaScriptException ex)  { endDrag(x, y); }
+  }
+
+  /*
+   * setWidgetPosition : move a widget in function
+   *  of his dimensions and the x, y coordinate
+   * Fire the different listeners :
+   *    move : simple one
+   *    enter : if a drop target is detected, only fire once
+   *    over : if a drop target is detected, fire on each move on this target
+   *    exit : if a widget exit a drop target, fire once.
+   * dropListenerMap : the collection of drop listener that we have to detect.
+   * dragOver : true if a drop target is detected.
+   * update : Allow to gets new drop target position.
+   * left, right, top and bottom : the coordinate of the widget which is moving,
+   * so that it may find a dropping target.
+   */
+  /**
+   * Fired when the user moves the mouse over a widget. <br>
+   * This will fire the move, over and exit events of the drag and drop widgets.
+   * 
+   * @see com.google.gwt.user.client.ui.MouseListener#onMouseMove(
+   * com.google.gwt.user.client.ui.Widget, int, int)
+   * 
+   * @param sender the widget sending the event
+   * @param x the x coordinate of the mouse
+   * @param y the y coordinate of the mouse
+   */
+  public void onMouseMove(Widget sender, int x, int y) {
+    try {
+      if (isClic && drag != null && dragHandle != null) {
+        Element dragElem = drag.getElement();
+        if (dragPadding) {
+          left = DOM.getAbsoluteLeft(dragElem) + padding;
+          top = DOM.getAbsoluteTop(dragElem) + padding;
+          right = left + getWidth(dragElem) - padding;
+          bottom = top + getHeight(dragElem) - padding;
+        }
+        dragListener.fireOnDragMove(dragHandle, x, y);
+        if (drop == null && !update) {
+          for (Iterator it =  dropListenerMap.iterator(); it.hasNext();) {
+            dropListener = (DropListenerCollection) it.next();
+            Widget compare = dropListener.getWidget();
+            if (detectDrop(left, right, top, bottom, compare)
+                && dragHandle != compare) {
+              dragOver = true;
+              drop = compare;
+              if (drop != null) {
+                dragListener.fireOnDragEnter(dragHandle, drop);
+                dropListener.fireOnDropEnter(drop, dragHandle);
+              }
+              break;
+            }
+          }
+        }
+        if (drop != null && dragOver) {
+          if (detectDrop(left, right, top, bottom, drop)) {
+            dragListener.fireOnDragOver(dragHandle, drop);
+            dropListener.fireOnDropOver(drop, dragHandle);
+          } else {
+            dragListener.fireOnDragExit(dragHandle, drop);
+            dropListener.fireOnDropExit(drop, dragHandle);
+            drop = null;
+          }
+        }
+        if (dragMove) {
+          setWidgetPosition(drag,
+              (x + getLeft(dragElem) + borderLeft - xOffset),
+              (y + getTop(dragElem) + borderTop - yOffset));
+        }
+        if (update) {
+          this.updatePosition();
+        }
+        update = false;
+      }
+    } catch (JavaScriptException ex)  { endDrag(x, y); }
+  }
+
+  /**
+   * Fired when the mouse enters a widget's area.
+   * 
+   * @see com.google.gwt.user.client.ui.MouseListener#onMouseEnter(
+   * com.google.gwt.user.client.ui.Widget)
+   * 
+   * @param sender the widget sending the event
+   */
+  public void onMouseEnter(Widget sender) { }
+
+  /**
+   * Fired when the mouse leaves a widget's area.
+   * 
+   * @see com.google.gwt.user.client.ui.MouseListener#onMouseLeave(
+   * com.google.gwt.user.client.ui.Widget)
+   * 
+   * @param sender the widget sending the event
+   */
+  public void onMouseLeave(Widget sender) { }
+
+  /**
+   * Fired when the user releases the mouse button over a widget. <br>
+   * This will fire all the drop events, if two widgets are over.
+   * 
+   * @see com.google.gwt.user.client.ui.MouseListener#onMouseUp(
+   * com.google.gwt.user.client.ui.Widget, int, int)
+   * 
+   * @param sender the widget sending the event
+   * @param x the x coordinate of the mouse
+   * @param y the y coordinate of the mouse
+   */
+  public void onMouseUp(Widget sender, int x, int y) {
+    try {
+      endDrag(x, y);
+    } catch (JavaScriptException ex)  { endDrag(x, y); }
+  }
+
+  /**
+   * Finish a drag when a mouse is up, and set nulls and false all parameters.
+   * Fires the dragEnd Event, and if
+   * a drop target is detected, fires the onDrop Events.
+   * 
+   * @param x the x coordinate of the mouse
+   * @param y the y coordinate of the mouse
+   */
+  private void endDrag(int x, int y) {
+    isClic = false;
+    dragOver = false;
+    update = true;
+    if (drop != null && dragHandle != null) {
+      if (detectDrop(left, right, top, bottom, drop)) {
+        dragListener.fireDragOnDrop(dragHandle, drop);
+        dropListener.fireDropOnDrop(drop, dragHandle);
+        dropListener = null;
+        drop = null;
+      }
+    }
+    if (dragHandle != null) {
+      DOM.releaseCapture(dragHandle.getElement());
+      dragListener.fireOnDragEnd(dragHandle,  x, y);
+      dragHandle = null;
+    }
+  }
+
+  /**
+   * Update the positions of the different drop Widget.
+   */
+  private void updatePosition() {
+    for (Iterator it =  dropListenerMap.iterator(); it.hasNext();) {
+      Element dropElem =
+          ((DropListenerCollection) it.next()).getWidget().getElement();
+      DOM.setElementPropertyInt(dropElem, "startWidth",  getWidth(dropElem));
+      DOM.setElementPropertyInt(dropElem, "startHeight", getHeight(dropElem));
+      DOM.setElementPropertyInt(dropElem, "startLeft",
+          DOM.getAbsoluteLeft(dropElem));
+      DOM.setElementPropertyInt(dropElem, "startTop",
+          DOM.getAbsoluteTop(dropElem));
+    }
+  }
+}
Index: user/src/com/google/gwt/user/client/dnd/SourcesDropEvents.java
===================================================================
--- user/src/com/google/gwt/user/client/dnd/SourcesDropEvents.java	(révision 0)
+++ user/src/com/google/gwt/user/client/dnd/SourcesDropEvents.java	(révision 0)
@@ -0,0 +1,37 @@
+/*
+ * Copyright 2007 Google Inc.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.google.gwt.user.client.dnd;
+
+/**
+ * A widget that implements this interface sources the events defined by the
+ * {@link com.google.gwt.user.client.dnd.DragListener} interface.
+ */
+public interface SourcesDropEvents {
+
+  /**
+   * Adds a listener interface to receive drop events.
+   * 
+   * @param listener the listener interface to add
+   */
+  void addDropListener(DropListener listener);
+
+  /**
+   * Removes a previously added drop listener interface.
+   * 
+   * @param listener the listener interface to remove
+   */
+  void removeDropListener(DropListener listener);
+}
Index: user/src/com/google/gwt/user/client/ui/FocusPanel.java
===================================================================
--- user/src/com/google/gwt/user/client/ui/FocusPanel.java	(révision 1184)
+++ user/src/com/google/gwt/user/client/ui/FocusPanel.java	(copie de travail)
@@ -17,6 +17,12 @@
 
 import com.google.gwt.user.client.DOM;
 import com.google.gwt.user.client.Event;
+import com.google.gwt.user.client.dnd.DragListener;
+import com.google.gwt.user.client.dnd.DragListenerCollection;
+import com.google.gwt.user.client.dnd.DropListener;
+import com.google.gwt.user.client.dnd.DropListenerCollection;
+import com.google.gwt.user.client.dnd.SourcesDragEvents;
+import com.google.gwt.user.client.dnd.SourcesDropEvents;
 import com.google.gwt.user.client.ui.impl.FocusImpl;
 
 /**
@@ -24,7 +30,8 @@
  * catch mouse and keyboard events.
  */
 public class FocusPanel extends SimplePanel implements HasFocus,
-    SourcesClickEvents, SourcesMouseEvents, SourcesMouseWheelEvents {
+    SourcesClickEvents, SourcesMouseEvents, SourcesMouseWheelEvents,
+    SourcesDragEvents, SourcesDropEvents {
 
   static final FocusImpl impl = FocusImpl.getFocusImplForPanel();
 
@@ -33,6 +40,8 @@
   private KeyboardListenerCollection keyboardListeners;
   private MouseListenerCollection mouseListeners;
   private MouseWheelListenerCollection mouseWheelListeners;
+  private DragListenerCollection dragListeners;
+  private DropListenerCollection dropListeners;
 
   public FocusPanel() {
     super(impl.createFocusable());
@@ -80,6 +89,20 @@
     mouseWheelListeners.add(listener);
   }
 
+  public void addDragListener(DragListener listener) {
+    if (dragListeners == null) {
+      dragListeners = new DragListenerCollection();
+    }
+    dragListeners.add(listener, this);
+  }
+
+  public void addDropListener(DropListener listener) {
+    if (dropListeners == null) {
+      dropListeners = new DropListenerCollection();
+    }
+    dropListeners.add(listener, this);
+  }
+
   public int getTabIndex() {
     return impl.getTabIndex(getElement());
   }
@@ -155,6 +178,18 @@
     }
   }
 
+  public void removeDragListener(DragListener listener) {
+    if (dragListeners != null) {
+      dragListeners.remove(listener);
+    }
+  }
+
+  public void removeDropListener(DropListener listener) {
+    if (dropListeners != null) {
+      dropListeners.remove(listener);
+    }
+  }
+
   public void setAccessKey(char key) {
     impl.setAccessKey(getElement(), key);
   }
Index: user/src/com/google/gwt/user/client/ui/Image.java
===================================================================
--- user/src/com/google/gwt/user/client/ui/Image.java	(révision 1184)
+++ user/src/com/google/gwt/user/client/ui/Image.java	(copie de travail)
@@ -20,6 +20,12 @@
 import com.google.gwt.user.client.Command;
 import com.google.gwt.user.client.Element;
 import com.google.gwt.user.client.Event;
+import com.google.gwt.user.client.dnd.DragListener;
+import com.google.gwt.user.client.dnd.DragListenerCollection;
+import com.google.gwt.user.client.dnd.DropListener;
+import com.google.gwt.user.client.dnd.DropListenerCollection;
+import com.google.gwt.user.client.dnd.SourcesDragEvents;
+import com.google.gwt.user.client.dnd.SourcesDropEvents;
 import com.google.gwt.user.client.ui.impl.ClippedImageImpl;
 import com.google.gwt.core.client.GWT;
 
@@ -62,7 +68,8 @@
  * </p>
  */
 public class Image extends Widget implements SourcesClickEvents,
-    SourcesLoadEvents, SourcesMouseEvents, SourcesMouseWheelEvents {
+    SourcesLoadEvents, SourcesMouseEvents, SourcesMouseWheelEvents,
+    SourcesDragEvents, SourcesDropEvents {
 
   /**
    * Abstract class which is used to hold the state associated with an image
@@ -286,6 +293,8 @@
   private LoadListenerCollection loadListeners;
   private MouseListenerCollection mouseListeners;
   private MouseWheelListenerCollection mouseWheelListeners;
+  private DragListenerCollection dragListeners;
+  private DropListenerCollection dropListeners;
 
   private State state;
 
@@ -359,6 +368,20 @@
     mouseWheelListeners.add(listener);
   }
 
+  public void addDragListener(DragListener listener) {
+    if (dragListeners == null) {
+      dragListeners = new DragListenerCollection();
+    }
+    dragListeners.add(listener, this);
+  }
+
+  public void addDropListener(DropListener listener) {
+    if (dropListeners == null) {
+      dropListeners = new DropListenerCollection();
+    }
+    dropListeners.add(listener, this);
+  }
+
   /**
    * Gets the height of the image. When the image is in the unclipped state, the
    * height of the image is not known until the image has been loaded (i.e. load
@@ -480,6 +503,18 @@
     }
   }
 
+  public void removeDragListener(DragListener listener) {
+    if (dragListeners != null) {
+      dragListeners.remove(listener);
+    }
+  }
+
+  public void removeDropListener(DropListener listener) {
+    if (dropListeners != null) {
+      dropListeners.remove(listener);
+    }
+  }
+
   /**
    * Sets the URL of the image to be displayed. If the image is in the clipped
    * state, a call to this method will cause a transition of the image to the
Index: user/src/com/google/gwt/user/client/ui/Label.java
===================================================================
--- user/src/com/google/gwt/user/client/ui/Label.java	(révision 1184)
+++ user/src/com/google/gwt/user/client/ui/Label.java	(copie de travail)
@@ -17,6 +17,12 @@
 
 import com.google.gwt.user.client.DOM;
 import com.google.gwt.user.client.Event;
+import com.google.gwt.user.client.dnd.DragListener;
+import com.google.gwt.user.client.dnd.DragListenerCollection;
+import com.google.gwt.user.client.dnd.DropListener;
+import com.google.gwt.user.client.dnd.DropListenerCollection;
+import com.google.gwt.user.client.dnd.SourcesDragEvents;
+import com.google.gwt.user.client.dnd.SourcesDropEvents;
 
 /**
  * A widget that contains arbitrary text, <i>not</i> interpreted as HTML.
@@ -31,13 +37,15 @@
  * </p>
  */
 public class Label extends Widget implements SourcesClickEvents,
-    SourcesMouseEvents, SourcesMouseWheelEvents,
-    HasHorizontalAlignment, HasText, HasWordWrap {
+    SourcesMouseEvents, SourcesMouseWheelEvents, SourcesDragEvents,
+    SourcesDropEvents, HasHorizontalAlignment, HasText, HasWordWrap {
 
   private ClickListenerCollection clickListeners;
   private HorizontalAlignmentConstant horzAlign;
   private MouseListenerCollection mouseListeners;
   private MouseWheelListenerCollection mouseWheelListeners;
+  private DragListenerCollection dragListeners;
+  private DropListenerCollection dropListeners;
 
   /**
    * Creates an empty label.
@@ -90,6 +98,20 @@
     mouseWheelListeners.add(listener);
   }
 
+  public void addDragListener(DragListener listener) {
+    if (dragListeners == null) {
+      dragListeners = new DragListenerCollection();
+    }
+    dragListeners.add(listener, this);
+  }
+
+  public void addDropListener(DropListener listener) {
+    if (dropListeners == null) {
+      dropListeners = new DropListenerCollection();
+    }
+    dropListeners.add(listener, this);
+  }
+
   public HorizontalAlignmentConstant getHorizontalAlignment() {
     return horzAlign;
   }
@@ -146,6 +168,18 @@
     }
   }
 
+  public void removeDragListener(DragListener listener) {
+    if (dragListeners != null) {
+      dragListeners.remove(listener);
+    }
+  }
+
+  public void removeDropListener(DropListener listener) {
+    if (dropListeners != null) {
+      dropListeners.remove(listener);
+    }
+  }
+
   public void setHorizontalAlignment(HorizontalAlignmentConstant align) {
     horzAlign = align;
     DOM
